overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/room/{id}/egress"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: stopRoomEgress
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.StopEgress(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{id}/multistream/{targetId}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: removeMultistreamTarget
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    var targetID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.RemoveMultistreamTarget(ctx, id, targetID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getStreams
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var streamsonly *string = livepeergo.String(\"<value>\")\n    \n    ctx := context.Background()\n    res, err := s.GetAll(ctx, streamsonly)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{id}/clips"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getClips
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.GetClips(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/asset"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getAssets
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.GetAll(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/session/{id}/clips"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSessionClips
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.GetClips(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/access-control/signing-key"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createSigningKey
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.Create(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.SigningKey != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/session"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSessions
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.GetAll(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/room/{id}/user"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createRoomUser
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    roomUserPayload := components.RoomUserPayload{\n        Name: \"name\",\n        CanPublish: livepeergo.Bool(true),\n        CanPublishData: livepeergo.Bool(true),\n    }\n    \n    ctx := context.Background()\n    res, err := s.CreateUser(ctx, id, roomUserPayload)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.RoomUserResponse != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/room/{id}/user/{userId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getRoomUser
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    var userID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.GetUser(ctx, id, userID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.GetRoomUserResponse != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/data/usage/query"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getUsageMetrics
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.GetUsageMetricsRequest{}\n    \n    ctx := context.Background()\n    res, err := s.GetUsage(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.UsageMetric != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/data/views/query"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getViewershipMetrics
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.GetViewershipMetricsRequest{}\n    \n    ctx := context.Background()\n    res, err := s.GetViewership(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSigningKey
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var keyID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, keyID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.SigningKey != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/transcode"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: transcodeVideo
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := components.TranscodePayload{\n        Input: components.CreateInputInput1(\n                components.Input1{\n                    URL: \"https://s3.amazonaws.com/bucket/file.mp4\",\n                },\n        ),\n        Storage: components.CreateTranscodePayloadStorageStorage1(\n                components.Storage1{\n                    Type: components.StorageTypeS3,\n                    Endpoint: \"https://gateway.storjshare.io\",\n                    Bucket: \"outputbucket\",\n                    Credentials: components.StorageCredentials{\n                        AccessKeyID: \"AKIAIOSFODNN7EXAMPLE\",\n                        SecretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n                    },\n                },\n        ),\n        Outputs: components.Outputs{\n            Hls: &components.Hls{\n                Path: \"/samplevideo/hls\",\n            },\n            Mp4: &components.Mp4{\n                Path: \"/samplevideo/mp4\",\n            },\n            Fmp4: &components.Fmp4{\n                Path: \"/samplevideo/fmp4\",\n            },\n        },\n        Profiles: []components.TranscodeProfile{\n            components.TranscodeProfile{\n                Width: livepeergo.Int64(1280),\n                Name: livepeergo.String(\"720p\"),\n                Bitrate: 3000000,\n                Quality: livepeergo.Int64(23),\n                Fps: livepeergo.Int64(30),\n                FpsDen: livepeergo.Int64(1),\n                Gop: livepeergo.String(\"2\"),\n                Profile: components.TranscodeProfileProfileH264Baseline.ToPointer(),\n                Encoder: components.TranscodeProfileEncoderH264.ToPointer(),\n            },\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.Create(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Task != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createStream
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := components.NewStreamPayload{\n        Name: \"test_stream\",\n        Pull: &components.Pull{\n            Source: \"https://myservice.com/live/stream.flv\",\n            Headers: map[string]string{\n                \"Authorization\": \"Bearer 123\",\n            },\n            Location: &components.Location{\n                Lat: 39.739,\n                Lon: -104.988,\n            },\n        },\n        PlaybackPolicy: &components.PlaybackPolicy{\n            Type: components.TypeWebhook,\n            WebhookID: livepeergo.String(\"1bde4o2i6xycudoy\"),\n            WebhookContext: map[string]any{\n                \"streamerId\": \"my-custom-id\",\n            },\n            RefreshInterval: livepeergo.Float64(600),\n        },\n        Profiles: []components.FfmpegProfile{\n            components.FfmpegProfile{\n                Width: 1280,\n                Name: \"720p\",\n                Height: 486589,\n                Bitrate: 3000000,\n                Fps: 30,\n                FpsDen: livepeergo.Int64(1),\n                Quality: livepeergo.Int64(23),\n                Gop: livepeergo.String(\"2\"),\n                Profile: components.ProfileH264Baseline.ToPointer(),\n            },\n        },\n        Record: livepeergo.Bool(false),\n        Multistream: &components.Multistream{\n            Targets: []components.Target{\n                components.Target{\n                    Profile: \"720p\",\n                    VideoOnly: livepeergo.Bool(false),\n                    ID: livepeergo.String(\"PUSH123\"),\n                    Spec: &components.TargetSpec{\n                        Name: livepeergo.String(\"My target\"),\n                        URL: \"rtmps://live.my-service.tv/channel/secretKey\",\n                    },\n                },\n            },\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.Create(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Stream != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: go
          label: updateStream
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    streamPatchPayload := components.StreamPatchPayload{\n        Record: livepeergo.Bool(false),\n        Multistream: &components.Multistream{\n            Targets: []components.Target{\n                components.Target{\n                    Profile: \"720p\",\n                    VideoOnly: livepeergo.Bool(false),\n                    ID: livepeergo.String(\"PUSH123\"),\n                    Spec: &components.TargetSpec{\n                        Name: livepeergo.String(\"My target\"),\n                        URL: \"rtmps://live.my-service.tv/channel/secretKey\",\n                    },\n                },\n            },\n        },\n        PlaybackPolicy: &components.PlaybackPolicy{\n            Type: components.TypeWebhook,\n            WebhookID: livepeergo.String(\"1bde4o2i6xycudoy\"),\n            WebhookContext: map[string]any{\n                \"streamerId\": \"my-custom-id\",\n            },\n            RefreshInterval: livepeergo.Float64(600),\n        },\n        Profiles: []components.FfmpegProfile{\n            components.FfmpegProfile{\n                Width: 1280,\n                Name: \"720p\",\n                Height: 857478,\n                Bitrate: 3000000,\n                Fps: 30,\n                FpsDen: livepeergo.Int64(1),\n                Quality: livepeergo.Int64(23),\n                Gop: livepeergo.String(\"2\"),\n                Profile: components.ProfileH264Baseline.ToPointer(),\n            },\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.Update(ctx, id, streamPatchPayload)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/multistream/target"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getMultistreamTargets
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.GetAll(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/room"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createRoom
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.Create(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CreateRoomResponse != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/task"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getTasks
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.GetAll(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{id}/create-multistream-target"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: addMultistreamTarget
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    targetAddPayload := components.TargetAddPayload{\n        Profile: \"720p0\",\n        VideoOnly: livepeergo.Bool(false),\n        ID: livepeergo.String(\"PUSH123\"),\n        Spec: &components.TargetAddPayloadSpec{\n            Name: livepeergo.String(\"My target\"),\n            URL: \"rtmps://live.my-service.tv/channel/secretKey\",\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.AddMultistreamTarget(ctx, id, targetAddPayload)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/multistream/target/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deleteMultistreamTarget
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Delete(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/webhook/{id}/log/{logId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getWebhookLog
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    var logID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.GetLog(ctx, id, logID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.WebhookLog != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deleteSigningKey
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var keyID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Delete(ctx, keyID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/asset/request-upload"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: requestUpload
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := components.NewAssetPayload{\n        Name: \"filename.mp4\",\n        StaticMp4: livepeergo.Bool(true),\n        PlaybackPolicy: &components.PlaybackPolicy{\n            Type: components.TypeWebhook,\n            WebhookID: livepeergo.String(\"1bde4o2i6xycudoy\"),\n            WebhookContext: map[string]any{\n                \"streamerId\": \"my-custom-id\",\n            },\n            RefreshInterval: livepeergo.Float64(600),\n        },\n        Profiles: []components.TranscodeProfile{\n            components.TranscodeProfile{\n                Width: livepeergo.Int64(1280),\n                Name: livepeergo.String(\"720p\"),\n                Bitrate: 3000000,\n                Quality: livepeergo.Int64(23),\n                Fps: livepeergo.Int64(30),\n                FpsDen: livepeergo.Int64(1),\n                Gop: livepeergo.String(\"2\"),\n                Profile: components.TranscodeProfileProfileH264Baseline.ToPointer(),\n                Encoder: components.TranscodeProfileEncoderH264.ToPointer(),\n            },\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.Create(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{parentId}/sessions"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getRecordedSessions
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var parentID string = \"<value>\"\n\n    var record *int64 = livepeergo.Int64(1)\n    \n    ctx := context.Background()\n    res, err := s.GetRecorded(ctx, parentID, record)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/room/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deleteRoom
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Delete(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/webhook/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getWebhook
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Webhook != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/room/{id}/egress"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: startRoomEgress
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    roomEgressPayload := components.RoomEgressPayload{\n        StreamID: \"aac12556-4d65-4d34-9fb6-d1f0985eb0a9\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.StartEgress(ctx, id, roomEgressPayload)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/multistream/target"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMultistreamTarget
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := components.MultistreamTargetInput{\n        URL: \"rtmps://live.my-service.tv/channel/secretKey\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.Create(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MultistreamTarget != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/webhook/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: go
          label: updateWebhook
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    webhook := components.WebhookInput{\n        Name: \"test_webhook\",\n        Events: []components.Events{\n            components.EventsStreamStarted,\n            components.EventsStreamIdle,\n        },\n        URL: \"https://my-service.com/webhook\",\n        SharedSecret: livepeergo.String(\"my-secret\"),\n        StreamID: livepeergo.String(\"de7818e7-610a-4057-8f6f-b785dc1e6f88\"),\n    }\n    \n    ctx := context.Background()\n    res, err := s.Update(ctx, id, webhook)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Webhook != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/data/views/query/total/{playbackId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getPublicViewershipMetrics
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var playbackID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.GetPublicViewership(ctx, playbackID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/access-control/signing-key"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSigningKeys
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.GetAll(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/asset/{assetId}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deleteAsset
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var assetID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Delete(ctx, assetID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/multistream/target/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: go
          label: updateMultistreamTarget
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    multistreamTargetPatchPayload := components.MultistreamTargetPatchPayload{\n        URL: \"rtmps://live.my-service.tv/channel/secretKey\",\n    }\n    \n    ctx := context.Background()\n    res, err := s.Update(ctx, id, multistreamTargetPatchPayload)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/webhook"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createWebhook
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := components.WebhookInput{\n        Name: \"test_webhook\",\n        Events: []components.Events{\n            components.EventsStreamStarted,\n            components.EventsStreamIdle,\n        },\n        URL: \"https://my-service.com/webhook\",\n        SharedSecret: livepeergo.String(\"my-secret\"),\n        StreamID: livepeergo.String(\"de7818e7-610a-4057-8f6f-b785dc1e6f88\"),\n    }\n    \n    ctx := context.Background()\n    res, err := s.Create(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Webhook != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/webhook/{id}/log"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getWebhookLogs
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.GetLogs(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/webhook/{id}/log/{logId}/resend"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: resendWebhook
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    var logID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.ResendLog(ctx, id, logID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.WebhookLog != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/playback/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getPlaybackInfo
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.PlaybackInfo != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deleteStream
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Delete(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/room/{id}/user/{userId}"]["put"]
    update:
      x-codeSamples:
        - lang: go
          label: updateRoomUser
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    var userID string = \"<value>\"\n\n    roomUserUpdatePayload := components.RoomUserUpdatePayload{\n        CanPublish: livepeergo.Bool(true),\n        CanPublishData: livepeergo.Bool(true),\n    }\n    \n    ctx := context.Background()\n    res, err := s.UpdateUser(ctx, id, userID, roomUserUpdatePayload)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/data/views/query/creator"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getCreatorViewershipMetrics
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := operations.GetCreatorViewershipMetricsRequest{}\n    \n    ctx := context.Background()\n    res, err := s.GetCreatorViewership(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["patch"]
    update:
      x-codeSamples:
        - lang: go
          label: updateSigningKey
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var keyID string = \"<value>\"\n\n    requestBody := operations.UpdateSigningKeyRequestBody{}\n    \n    ctx := context.Background()\n    res, err := s.Update(ctx, keyID, requestBody)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getStream
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Stream != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/asset/upload/url"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: uploadAsset
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := components.NewAssetFromURLPayload{\n        Name: \"filename.mp4\",\n        StaticMp4: livepeergo.Bool(true),\n        PlaybackPolicy: &components.PlaybackPolicy{\n            Type: components.TypeWebhook,\n            WebhookID: livepeergo.String(\"1bde4o2i6xycudoy\"),\n            WebhookContext: map[string]any{\n                \"streamerId\": \"my-custom-id\",\n            },\n            RefreshInterval: livepeergo.Float64(600),\n        },\n        URL: \"https://s3.amazonaws.com/my-bucket/path/filename.mp4\",\n        Profiles: []components.TranscodeProfile{\n            components.TranscodeProfile{\n                Width: livepeergo.Int64(1280),\n                Name: livepeergo.String(\"720p\"),\n                Bitrate: 3000000,\n                Quality: livepeergo.Int64(23),\n                Fps: livepeergo.Int64(30),\n                FpsDen: livepeergo.Int64(1),\n                Gop: livepeergo.String(\"2\"),\n                Profile: components.TranscodeProfileProfileH264Baseline.ToPointer(),\n                Encoder: components.TranscodeProfileEncoderH264.ToPointer(),\n            },\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.CreateViaURL(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.TwoHundredApplicationJSONData != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/clip"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createClip
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    request := components.ClipPayload{\n        PlaybackID: \"eaw4nk06ts2d0mzb\",\n        StartTime: 1587667174725,\n        EndTime: livepeergo.Float64(1587667174725),\n        Name: livepeergo.String(\"My Clip\"),\n        SessionID: livepeergo.String(\"de7818e7-610a-4057-8f6f-b785dc1e6f88\"),\n    }\n    \n    ctx := context.Background()\n    res, err := s.CreateClip(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/asset/{assetId}"]["patch"]
    update:
      x-codeSamples:
        - lang: go
          label: updateAsset
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"github.com/livepeer/livepeer-go/models/components\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var assetID string = \"<value>\"\n\n    assetPatchPayload := components.AssetPatchPayload{\n        Name: livepeergo.String(\"filename.mp4\"),\n        PlaybackPolicy: &components.PlaybackPolicy{\n            Type: components.TypeWebhook,\n            WebhookID: livepeergo.String(\"1bde4o2i6xycudoy\"),\n            WebhookContext: map[string]any{\n                \"streamerId\": \"my-custom-id\",\n            },\n            RefreshInterval: livepeergo.Float64(600),\n        },\n    }\n    \n    ctx := context.Background()\n    res, err := s.Update(ctx, assetID, assetPatchPayload)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Asset != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/room/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getRoom
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Room != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/room/{id}/user/{userId}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deleteRoomUser
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n\n    var userID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.DeleteUser(ctx, id, userID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/webhook/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deleteWebhook
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Delete(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Webhook != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/asset/{assetId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getAsset
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var assetID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, assetID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Asset != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/session/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSession
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Session != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/task/{taskId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getTask
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var taskID string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, taskID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Task != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{id}/terminate"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: terminateStream
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Terminate(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/stream/{id}/start-pull"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: startPullStream
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.StartPull(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/multistream/target/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getMultistreamTarget
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n    var id string = \"<value>\"\n    \n    ctx := context.Background()\n    res, err := s.Get(ctx, id)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MultistreamTarget != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/webhook"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getWebhooks
          source: "package main\n\nimport(\n\tlivepeergo \"github.com/livepeer/livepeer-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := livepeergo.New(\n        livepeergo.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n    )\n\n\n    \n    ctx := context.Background()\n    res, err := s.GetAll(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Data != nil {\n        // handle response\n    }\n}"
