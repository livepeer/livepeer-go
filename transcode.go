// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package livepeergo

import (
	"bytes"
	"context"
	"fmt"
	"github.com/cenkalti/backoff/v4"
	"github.com/livepeer/livepeer-go/internal/hooks"
	"github.com/livepeer/livepeer-go/internal/utils"
	"github.com/livepeer/livepeer-go/models/components"
	"github.com/livepeer/livepeer-go/models/operations"
	"github.com/livepeer/livepeer-go/models/sdkerrors"
	"io"
	"net/http"
	"net/url"
)

// Transcode - Operations related to transcode api
type Transcode struct {
	sdkConfiguration sdkConfiguration
}

func newTranscode(sdkConfig sdkConfiguration) *Transcode {
	return &Transcode{
		sdkConfiguration: sdkConfig,
	}
}

// Create - Transcode a video
// `POST /transcode` transcodes a video file and uploads the results to the
// specified storage service.
// \
// \
// Transcoding is asynchronous so you will need to check the status of the
// task in order to determine when transcoding is complete. The `id` field
// in the response is the unique ID for the transcoding `Task`. The task
// status can be queried using the [GET tasks
// endpoint](https://docs.livepeer.org/reference/api/get-tasks):
// \
// \
// When `status.phase` is `completed`,  transcoding will be complete and
// the results will be stored in the storage service and the specified
// output location.
// \
// \
// The results will be available under `params.outputs.hls.path` and
// `params.outputs.mp4.path` in the specified storage service.
// ## Input
// \
// This endpoint currently supports the following inputs:
// - HTTP
// - S3 API Compatible Service
// \
// \
// **HTTP**
// \
// A public HTTP URL can be used to read a video file.
// ```json
//
//	{
//	    "url": "https://www.example.com/video.mp4"
//	}
//
// ```
// | Name | Type   | Description                          |
// | ---- | ------ | ------------------------------------ |
// | url  | string | A public HTTP URL for the video file. |
//
// Note: For IPFS HTTP gateway URLs, the API currently only supports “path
// style” URLs and does not support “subdomain style” URLs. The API will
// support both styles of URLs in a future update.
// \
// \
// **S3 API Compatible Service**
// \
// \
// S3 credentials can be used to authenticate with a S3 API compatible
// service to read a video file.
//
// ```json
//
//	{
//	    "type": "s3",
//	    "endpoint": "https://gateway.storjshare.io",
//	    "credentials": {
//	        "accessKeyId": "$ACCESS_KEY_ID",
//	        "secretAccessKey": "$SECRET_ACCESS_KEY"
//	    },
//	    "bucket": "inbucket",
//	    "path": "/video/source.mp4"
//	}
//
// ```
//
// ## Storage
// \
// This endpoint currently supports the following storage services:
// - S3 API Compatible Service
// - Web3 Storage
// \
// \
// **S3 API Compatible Service**
// ```json
//
//	{
//	  "type": "s3",
//	    "endpoint": "https://gateway.storjshare.io",
//	    "credentials": {
//	        "accessKeyId": "$ACCESS_KEY_ID",
//	        "secretAccessKey": "$SECRET_ACCESS_KEY"
//	    },
//	    "bucket": "mybucket"
//	}
//
// ```
//
// **Web3 Storage**
//
// ```json
//
//	{
//	  "type": "web3.storage",
//	    "credentials": {
//	        "proof": "$UCAN_DELEGATION_PROOF",
//	    }
//	}
//
// ```
//
// ## Outputs
// \
// This endpoint currently supports the following output types:
// - HLS
// - MP4
//
// **HLS**
//
// ```json
//
//	{
//	  "hls": {
//	        "path": "/samplevideo/hls"
//	    }
//	}
//
// ```
//
// **MP4**
//
// ```json
//
//	{
//	  "mp4": {
//	        "path": "/samplevideo/mp4"
//	    }
//	}
//
// ```
func (s *Transcode) Create(ctx context.Context, request components.TranscodePayload, opts ...operations.Option) (*operations.TranscodeVideoResponse, error) {
	hookCtx := hooks.HookContext{
		Context:        ctx,
		OperationID:    "transcodeVideo",
		OAuth2Scopes:   []string{},
		SecuritySource: s.sdkConfiguration.Security,
	}

	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionRetries,
		operations.SupportedOptionTimeout,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}

	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	opURL, err := url.JoinPath(baseURL, "/transcode")
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, false, "Request", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, err
	}

	timeout := o.Timeout
	if timeout == nil {
		timeout = s.sdkConfiguration.Timeout
	}

	if timeout != nil {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, *timeout)
		defer cancel()
	}

	req, err := http.NewRequestWithContext(ctx, "POST", opURL, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("User-Agent", s.sdkConfiguration.UserAgent)
	req.Header.Set("Content-Type", reqContentType)

	if err := utils.PopulateSecurity(ctx, req, s.sdkConfiguration.Security); err != nil {
		return nil, err
	}

	globalRetryConfig := s.sdkConfiguration.RetryConfig
	retryConfig := o.Retries
	if retryConfig == nil {
		if globalRetryConfig != nil {
			retryConfig = globalRetryConfig
		}
	}

	var httpRes *http.Response
	if retryConfig != nil {
		httpRes, err = utils.Retry(ctx, utils.Retries{
			Config: retryConfig,
			StatusCodes: []string{
				"429",
				"500",
				"502",
				"503",
				"504",
			},
		}, func() (*http.Response, error) {
			if req.Body != nil {
				copyBody, err := req.GetBody()
				if err != nil {
					return nil, err
				}
				req.Body = copyBody
			}

			req, err = s.sdkConfiguration.Hooks.BeforeRequest(hooks.BeforeRequestContext{HookContext: hookCtx}, req)
			if err != nil {
				return nil, backoff.Permanent(err)
			}

			httpRes, err := s.sdkConfiguration.Client.Do(req)
			if err != nil || httpRes == nil {
				if err != nil {
					err = fmt.Errorf("error sending request: %w", err)
				} else {
					err = fmt.Errorf("error sending request: no response")
				}

				_, err = s.sdkConfiguration.Hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, nil, err)
			}
			return httpRes, err
		})

		if err != nil {
			return nil, err
		} else {
			httpRes, err = s.sdkConfiguration.Hooks.AfterSuccess(hooks.AfterSuccessContext{HookContext: hookCtx}, httpRes)
			if err != nil {
				return nil, err
			}
		}
	} else {
		req, err = s.sdkConfiguration.Hooks.BeforeRequest(hooks.BeforeRequestContext{HookContext: hookCtx}, req)
		if err != nil {
			return nil, err
		}

		httpRes, err = s.sdkConfiguration.Client.Do(req)
		if err != nil || httpRes == nil {
			if err != nil {
				err = fmt.Errorf("error sending request: %w", err)
			} else {
				err = fmt.Errorf("error sending request: no response")
			}

			_, err = s.sdkConfiguration.Hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, nil, err)
			return nil, err
		} else if utils.MatchStatusCodes([]string{"4XX", "5XX"}, httpRes.StatusCode) {
			_httpRes, err := s.sdkConfiguration.Hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, httpRes, nil)
			if err != nil {
				return nil, err
			} else if _httpRes != nil {
				httpRes = _httpRes
			}
		} else {
			httpRes, err = s.sdkConfiguration.Hooks.AfterSuccess(hooks.AfterSuccessContext{HookContext: hookCtx}, httpRes)
			if err != nil {
				return nil, err
			}
		}
	}

	res := &operations.TranscodeVideoResponse{
		HTTPMeta: components.HTTPMetadata{
			Request:  req,
			Response: httpRes,
		},
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(httpRes.Header.Get("Content-Type"), `application/json`):
			var out components.Task
			if err := utils.UnmarshalJsonFromResponseBody(bytes.NewBuffer(rawBody), &out, ""); err != nil {
				return nil, err
			}

			res.Task = &out
		default:
			return nil, sdkerrors.NewSDKError(fmt.Sprintf("unknown content-type received: %s", httpRes.Header.Get("Content-Type")), httpRes.StatusCode, string(rawBody), httpRes)
		}
	case httpRes.StatusCode >= 400 && httpRes.StatusCode < 500:
		fallthrough
	case httpRes.StatusCode >= 500 && httpRes.StatusCode < 600:
		return nil, sdkerrors.NewSDKError("API error occurred", httpRes.StatusCode, string(rawBody), httpRes)
	default:
		switch {
		case utils.MatchContentType(httpRes.Header.Get("Content-Type"), `application/json`):
			var out sdkerrors.Error
			if err := utils.UnmarshalJsonFromResponseBody(bytes.NewBuffer(rawBody), &out, ""); err != nil {
				return nil, err
			}

			res.Error = &out
		default:
			return nil, sdkerrors.NewSDKError(fmt.Sprintf("unknown content-type received: %s", httpRes.Header.Get("Content-Type")), httpRes.StatusCode, string(rawBody), httpRes)
		}
	}

	return res, nil

}
