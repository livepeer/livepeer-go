// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/livepeer/livepeer-go/models/components"
	"github.com/livepeer/livepeer-go/models/sdkerrors"
)

type QueryParamBreakdownBy string

const (
	QueryParamBreakdownByPlaybackID QueryParamBreakdownBy = "playbackId"
	QueryParamBreakdownByDevice     QueryParamBreakdownBy = "device"
	QueryParamBreakdownByBrowser    QueryParamBreakdownBy = "browser"
	QueryParamBreakdownByCountry    QueryParamBreakdownBy = "country"
)

func (e QueryParamBreakdownBy) ToPointer() *QueryParamBreakdownBy {
	return &e
}
func (e *QueryParamBreakdownBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "playbackId":
		fallthrough
	case "device":
		fallthrough
	case "browser":
		fallthrough
	case "country":
		*e = QueryParamBreakdownBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamBreakdownBy: %v", v)
	}
}

type GetRealtimeViewershipNowRequest struct {
	// The playback ID to filter the query results. This can be a canonical
	// playback ID from Livepeer assets or streams, or dStorage identifiers
	// for assets
	//
	PlaybackID *string `queryParam:"style=form,explode=true,name=playbackId"`
	// The creator ID to filter the query results
	CreatorID *string `queryParam:"style=form,explode=true,name=creatorId"`
	// The list of fields to break down the query results. Specify this
	// query-string multiple times to break down by multiple fields.
	//
	BreakdownBy []QueryParamBreakdownBy `queryParam:"style=form,explode=true,name=breakdownBy[]"`
}

func (o *GetRealtimeViewershipNowRequest) GetPlaybackID() *string {
	if o == nil {
		return nil
	}
	return o.PlaybackID
}

func (o *GetRealtimeViewershipNowRequest) GetCreatorID() *string {
	if o == nil {
		return nil
	}
	return o.CreatorID
}

func (o *GetRealtimeViewershipNowRequest) GetBreakdownBy() []QueryParamBreakdownBy {
	if o == nil {
		return nil
	}
	return o.BreakdownBy
}

type GetRealtimeViewershipNowResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of Metric objects
	Data []components.RealtimeViewershipMetric
	// Error
	Error *sdkerrors.Error
}

func (o *GetRealtimeViewershipNowResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetRealtimeViewershipNowResponse) GetData() []components.RealtimeViewershipMetric {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetRealtimeViewershipNowResponse) GetError() *sdkerrors.Error {
	if o == nil {
		return nil
	}
	return o.Error
}
