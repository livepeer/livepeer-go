// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"livepeer/internal/utils"
	"livepeer/models/components"
	"net/http"
	"time"
)

type FromType string

const (
	FromTypeDateTime FromType = "date-time"
	FromTypeInteger  FromType = "integer"
)

type From struct {
	DateTime *time.Time
	Integer  *int64

	Type FromType
}

func CreateFromDateTime(dateTime time.Time) From {
	typ := FromTypeDateTime

	return From{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateFromInteger(integer int64) From {
	typ := FromTypeInteger

	return From{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *From) UnmarshalJSON(data []byte) error {

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = FromTypeDateTime
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = FromTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u From) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ToType string

const (
	ToTypeDateTime ToType = "date-time"
	ToTypeInteger  ToType = "integer"
)

type To struct {
	DateTime *time.Time
	Integer  *int64

	Type ToType
}

func CreateToDateTime(dateTime time.Time) To {
	typ := ToTypeDateTime

	return To{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateToInteger(integer int64) To {
	typ := ToTypeInteger

	return To{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *To) UnmarshalJSON(data []byte) error {

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = ToTypeDateTime
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = ToTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u To) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// TimeStep - The time step to aggregate viewership metrics by
type TimeStep string

const (
	TimeStepHour  TimeStep = "hour"
	TimeStepDay   TimeStep = "day"
	TimeStepWeek  TimeStep = "week"
	TimeStepMonth TimeStep = "month"
	TimeStepYear  TimeStep = "year"
)

func (e TimeStep) ToPointer() *TimeStep {
	return &e
}

func (e *TimeStep) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hour":
		fallthrough
	case "day":
		fallthrough
	case "week":
		fallthrough
	case "month":
		fallthrough
	case "year":
		*e = TimeStep(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeStep: %v", v)
	}
}

type BreakdownBy string

const (
	BreakdownByPlaybackID    BreakdownBy = "playbackId"
	BreakdownByDeviceType    BreakdownBy = "deviceType"
	BreakdownByDevice        BreakdownBy = "device"
	BreakdownByCPU           BreakdownBy = "cpu"
	BreakdownByOs            BreakdownBy = "os"
	BreakdownByBrowser       BreakdownBy = "browser"
	BreakdownByBrowserEngine BreakdownBy = "browserEngine"
	BreakdownByContinent     BreakdownBy = "continent"
	BreakdownByCountry       BreakdownBy = "country"
	BreakdownBySubdivision   BreakdownBy = "subdivision"
	BreakdownByTimezone      BreakdownBy = "timezone"
	BreakdownByGeohash       BreakdownBy = "geohash"
	BreakdownByViewerID      BreakdownBy = "viewerId"
	BreakdownByCreatorID     BreakdownBy = "creatorId"
)

func (e BreakdownBy) ToPointer() *BreakdownBy {
	return &e
}

func (e *BreakdownBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "playbackId":
		fallthrough
	case "deviceType":
		fallthrough
	case "device":
		fallthrough
	case "cpu":
		fallthrough
	case "os":
		fallthrough
	case "browser":
		fallthrough
	case "browserEngine":
		fallthrough
	case "continent":
		fallthrough
	case "country":
		fallthrough
	case "subdivision":
		fallthrough
	case "timezone":
		fallthrough
	case "geohash":
		fallthrough
	case "viewerId":
		fallthrough
	case "creatorId":
		*e = BreakdownBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BreakdownBy: %v", v)
	}
}

type GetViewershipsMetricsRequest struct {
	// The playback ID to filter the query results. This can be a canonical
	// playback ID from Livepeer assets or streams, or dStorage identifiers
	// for assets
	//
	PlaybackID *string `queryParam:"style=form,explode=true,name=playbackId"`
	// Start timestamp for the query range (inclusive)
	From *From `queryParam:"style=form,explode=true,name=from"`
	// End timestamp for the query range (exclusive)
	To *To `queryParam:"style=form,explode=true,name=to"`
	// The time step to aggregate viewership metrics by
	TimeStep *TimeStep `queryParam:"style=form,explode=true,name=timeStep"`
	// The asset ID to filter metrics for
	AssetID *string `queryParam:"style=form,explode=true,name=assetId"`
	// The stream ID to filter metrics for
	StreamID *string `queryParam:"style=form,explode=true,name=streamId"`
	// The creator ID to filter the query results
	CreatorID *string `queryParam:"style=form,explode=true,name=creatorId"`
	// The list of fields to break down the query results. Specify this
	// query-string multiple times to break down by multiple fields.
	//
	BreakdownBy []BreakdownBy `queryParam:"style=form,explode=true,name=breakdownBy[]"`
}

func (o *GetViewershipsMetricsRequest) GetPlaybackID() *string {
	if o == nil {
		return nil
	}
	return o.PlaybackID
}

func (o *GetViewershipsMetricsRequest) GetFrom() *From {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetViewershipsMetricsRequest) GetTo() *To {
	if o == nil {
		return nil
	}
	return o.To
}

func (o *GetViewershipsMetricsRequest) GetTimeStep() *TimeStep {
	if o == nil {
		return nil
	}
	return o.TimeStep
}

func (o *GetViewershipsMetricsRequest) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *GetViewershipsMetricsRequest) GetStreamID() *string {
	if o == nil {
		return nil
	}
	return o.StreamID
}

func (o *GetViewershipsMetricsRequest) GetCreatorID() *string {
	if o == nil {
		return nil
	}
	return o.CreatorID
}

func (o *GetViewershipsMetricsRequest) GetBreakdownBy() []BreakdownBy {
	if o == nil {
		return nil
	}
	return o.BreakdownBy
}

type GetViewershipsMetricsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A list of Metric objects
	Data []components.ViewershipMetric
}

func (o *GetViewershipsMetricsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetViewershipsMetricsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetViewershipsMetricsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetViewershipsMetricsResponse) GetData() []components.ViewershipMetric {
	if o == nil {
		return nil
	}
	return o.Data
}
