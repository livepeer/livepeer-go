// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"livepeer/models/components"
	"net/http"
)

// GetUsageMetricsQueryParamTimeStep - The time step to aggregate viewership metrics by
type GetUsageMetricsQueryParamTimeStep string

const (
	GetUsageMetricsQueryParamTimeStepHour GetUsageMetricsQueryParamTimeStep = "hour"
	GetUsageMetricsQueryParamTimeStepDay  GetUsageMetricsQueryParamTimeStep = "day"
)

func (e GetUsageMetricsQueryParamTimeStep) ToPointer() *GetUsageMetricsQueryParamTimeStep {
	return &e
}

func (e *GetUsageMetricsQueryParamTimeStep) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hour":
		fallthrough
	case "day":
		*e = GetUsageMetricsQueryParamTimeStep(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsageMetricsQueryParamTimeStep: %v", v)
	}
}

type GetUsageMetricsRequest struct {
	// Start millis timestamp for the query range (inclusive)
	//
	From *int64 `queryParam:"style=form,explode=true,name=from"`
	// End millis timestamp for the query range (exclusive)
	//
	To *int64 `queryParam:"style=form,explode=true,name=to"`
	// The time step to aggregate viewership metrics by
	//
	TimeStep *GetUsageMetricsQueryParamTimeStep `queryParam:"style=form,explode=true,name=timeStep"`
	// The creator ID to filter the query results
	//
	CreatorID *string `queryParam:"style=form,explode=true,name=creatorId"`
}

func (o *GetUsageMetricsRequest) GetFrom() *int64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetUsageMetricsRequest) GetTo() *int64 {
	if o == nil {
		return nil
	}
	return o.To
}

func (o *GetUsageMetricsRequest) GetTimeStep() *GetUsageMetricsQueryParamTimeStep {
	if o == nil {
		return nil
	}
	return o.TimeStep
}

func (o *GetUsageMetricsRequest) GetCreatorID() *string {
	if o == nil {
		return nil
	}
	return o.CreatorID
}

type GetUsageMetricsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A Usage Metric object
	UsageMetric *components.UsageMetric
}

func (o *GetUsageMetricsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetUsageMetricsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetUsageMetricsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetUsageMetricsResponse) GetUsageMetric() *components.UsageMetric {
	if o == nil {
		return nil
	}
	return o.UsageMetric
}
