// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Phase of the asset storage
type Phase string

const (
	PhaseWaiting    Phase = "waiting"
	PhaseProcessing Phase = "processing"
	PhaseReady      Phase = "ready"
	PhaseFailed     Phase = "failed"
	PhaseReverted   Phase = "reverted"
)

func (e Phase) ToPointer() *Phase {
	return &e
}
func (e *Phase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "waiting":
		fallthrough
	case "processing":
		fallthrough
	case "ready":
		fallthrough
	case "failed":
		fallthrough
	case "reverted":
		*e = Phase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Phase: %v", v)
	}
}

type Tasks struct {
	// ID of any currently running task that is exporting this
	// asset to IPFS.
	//
	Pending *string `json:"pending,omitempty"`
	// ID of the last task to run successfully, that created
	// the currently saved data.
	//
	Last *string `json:"last,omitempty"`
	// ID of the last task to fail execution.
	Failed *string `json:"failed,omitempty"`
}

func (o *Tasks) GetPending() *string {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *Tasks) GetLast() *string {
	if o == nil {
		return nil
	}
	return o.Last
}

func (o *Tasks) GetFailed() *string {
	if o == nil {
		return nil
	}
	return o.Failed
}

type StorageStatus struct {
	// Phase of the asset storage
	Phase Phase `json:"phase"`
	// Current progress of the task updating the storage.
	Progress *float64 `json:"progress,omitempty"`
	// Error message if the last storage changed failed.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Tasks        Tasks   `json:"tasks"`
}

func (o *StorageStatus) GetPhase() Phase {
	if o == nil {
		return Phase("")
	}
	return o.Phase
}

func (o *StorageStatus) GetProgress() *float64 {
	if o == nil {
		return nil
	}
	return o.Progress
}

func (o *StorageStatus) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *StorageStatus) GetTasks() Tasks {
	if o == nil {
		return Tasks{}
	}
	return o.Tasks
}
