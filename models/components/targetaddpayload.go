// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/livepeer/livepeer-go/internal/utils"
)

// TargetAddPayloadSpec - Inline multistream target object. Will automatically
// create the target resource to be used by the created
// stream.
type TargetAddPayloadSpec struct {
	Name *string `json:"name,omitempty"`
	// Livepeer-compatible multistream target URL (RTMP(S) or SRT)
	URL string `json:"url"`
}

func (o *TargetAddPayloadSpec) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TargetAddPayloadSpec) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type TargetAddPayload struct {
	// Name of transcoding profile that should be sent. Use
	// "source" for pushing source stream data
	//
	Profile string `json:"profile"`
	// If true, the stream audio will be muted and only silent
	// video will be pushed to the target.
	//
	VideoOnly *bool `default:"false" json:"videoOnly"`
	// ID of multistream target object where to push this stream
	ID *string `json:"id,omitempty"`
	// Inline multistream target object. Will automatically
	// create the target resource to be used by the created
	// stream.
	//
	Spec *TargetAddPayloadSpec `json:"spec,omitempty"`
}

func (t TargetAddPayload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TargetAddPayload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TargetAddPayload) GetProfile() string {
	if o == nil {
		return ""
	}
	return o.Profile
}

func (o *TargetAddPayload) GetVideoOnly() *bool {
	if o == nil {
		return nil
	}
	return o.VideoOnly
}

func (o *TargetAddPayload) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TargetAddPayload) GetSpec() *TargetAddPayloadSpec {
	if o == nil {
		return nil
	}
	return o.Spec
}
