// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

type NewAssetFromURLPayload struct {
	// The name of the asset. This is not necessarily the filename - it can be a custom name or title.
	//
	Name string `json:"name"`
	// Whether to generate MP4s for the asset.
	StaticMp4 *bool `json:"staticMp4,omitempty"`
	// Whether the playback policy for an asset or stream is public or signed
	PlaybackPolicy *PlaybackPolicy `json:"playbackPolicy,omitempty"`
	CreatorID      *InputCreatorID `json:"creatorId,omitempty"`
	Storage        *Storage        `json:"storage,omitempty"`
	// URL where the asset contents can be retrieved, e.g. `https://s3.amazonaws.com/my-bucket/path/filename.mp4`.
	// For an IPFS source, this should be similar to: `ipfs://{CID}`. For an Arweave
	// source: `ar://{CID}`.
	//
	URL        string      `json:"url"`
	Encryption *Encryption `json:"encryption,omitempty"`
	// Decides if the output video should include C2PA signature
	C2pa     *bool              `json:"c2pa,omitempty"`
	Profiles []TranscodeProfile `json:"profiles,omitempty"`
	// How many seconds the duration of each output segment should be
	TargetSegmentSizeSecs *float64 `json:"targetSegmentSizeSecs,omitempty"`
}

func (o *NewAssetFromURLPayload) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *NewAssetFromURLPayload) GetStaticMp4() *bool {
	if o == nil {
		return nil
	}
	return o.StaticMp4
}

func (o *NewAssetFromURLPayload) GetPlaybackPolicy() *PlaybackPolicy {
	if o == nil {
		return nil
	}
	return o.PlaybackPolicy
}

func (o *NewAssetFromURLPayload) GetCreatorID() *InputCreatorID {
	if o == nil {
		return nil
	}
	return o.CreatorID
}

func (o *NewAssetFromURLPayload) GetStorage() *Storage {
	if o == nil {
		return nil
	}
	return o.Storage
}

func (o *NewAssetFromURLPayload) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *NewAssetFromURLPayload) GetEncryption() *Encryption {
	if o == nil {
		return nil
	}
	return o.Encryption
}

func (o *NewAssetFromURLPayload) GetC2pa() *bool {
	if o == nil {
		return nil
	}
	return o.C2pa
}

func (o *NewAssetFromURLPayload) GetProfiles() []TranscodeProfile {
	if o == nil {
		return nil
	}
	return o.Profiles
}

func (o *NewAssetFromURLPayload) GetTargetSegmentSizeSecs() *float64 {
	if o == nil {
		return nil
	}
	return o.TargetSegmentSizeSecs
}
