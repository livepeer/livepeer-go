// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"livepeer/internal/utils"
)

// IpfsExportParams2Output - Custom credentials for the Piñata service. Must have either
// a JWT or an API key and an API secret.
type IpfsExportParams2Output struct {
	// Will be added to the pinata_api_key header.
	APIKey string `json:"apiKey"`
}

func (o *IpfsExportParams2Output) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

// IpfsExportParams1Output - Custom credentials for the Piñata service. Must have either
// a JWT or an API key and an API secret.
type IpfsExportParams1Output struct {
}

type IpfsExportParamsPinataType string

const (
	IpfsExportParamsPinataTypeIpfsExportParams1Output IpfsExportParamsPinataType = "ipfs-export-params_1_output"
	IpfsExportParamsPinataTypeIpfsExportParams2Output IpfsExportParamsPinataType = "ipfs-export-params_2_output"
)

type IpfsExportParamsPinata struct {
	IpfsExportParams1Output *IpfsExportParams1Output
	IpfsExportParams2Output *IpfsExportParams2Output

	Type IpfsExportParamsPinataType
}

func CreateIpfsExportParamsPinataIpfsExportParams1Output(ipfsExportParams1Output IpfsExportParams1Output) IpfsExportParamsPinata {
	typ := IpfsExportParamsPinataTypeIpfsExportParams1Output

	return IpfsExportParamsPinata{
		IpfsExportParams1Output: &ipfsExportParams1Output,
		Type:                    typ,
	}
}

func CreateIpfsExportParamsPinataIpfsExportParams2Output(ipfsExportParams2Output IpfsExportParams2Output) IpfsExportParamsPinata {
	typ := IpfsExportParamsPinataTypeIpfsExportParams2Output

	return IpfsExportParamsPinata{
		IpfsExportParams2Output: &ipfsExportParams2Output,
		Type:                    typ,
	}
}

func (u *IpfsExportParamsPinata) UnmarshalJSON(data []byte) error {

	ipfsExportParams1Output := IpfsExportParams1Output{}
	if err := utils.UnmarshalJSON(data, &ipfsExportParams1Output, "", true, true); err == nil {
		u.IpfsExportParams1Output = &ipfsExportParams1Output
		u.Type = IpfsExportParamsPinataTypeIpfsExportParams1Output
		return nil
	}

	ipfsExportParams2Output := IpfsExportParams2Output{}
	if err := utils.UnmarshalJSON(data, &ipfsExportParams2Output, "", true, true); err == nil {
		u.IpfsExportParams2Output = &ipfsExportParams2Output
		u.Type = IpfsExportParamsPinataTypeIpfsExportParams2Output
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IpfsExportParamsPinata) MarshalJSON() ([]byte, error) {
	if u.IpfsExportParams1Output != nil {
		return utils.MarshalJSON(u.IpfsExportParams1Output, "", true)
	}

	if u.IpfsExportParams2Output != nil {
		return utils.MarshalJSON(u.IpfsExportParams2Output, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type IpfsExportParams struct {
	// Name of the NFT metadata template to export. 'player'
	// will embed the Livepeer Player on the NFT while 'file'
	// will reference only the immutable MP4 files.
	//
	NftMetadataTemplate *NftMetadataTemplate `default:"file" json:"nftMetadataTemplate"`
	// Additional data to add to the NFT metadata exported to
	// IPFS. Will be deep merged with the default metadata
	// exported.
	//
	NftMetadata *NftMetadata `json:"nftMetadata,omitempty"`
	// Custom credentials for the Piñata service. Must have either
	// a JWT or an API key and an API secret.
	//
	Pinata *IpfsExportParamsPinata `json:"pinata,omitempty"`
}

func (i IpfsExportParams) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IpfsExportParams) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IpfsExportParams) GetNftMetadataTemplate() *NftMetadataTemplate {
	if o == nil {
		return nil
	}
	return o.NftMetadataTemplate
}

func (o *IpfsExportParams) GetNftMetadata() *NftMetadata {
	if o == nil {
		return nil
	}
	return o.NftMetadata
}

func (o *IpfsExportParams) GetPinata() *IpfsExportParamsPinata {
	if o == nil {
		return nil
	}
	return o.Pinata
}
