// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"livepeer/internal/utils"
)

// IpfsExportParams2 - Custom credentials for the Piñata service. Must have either
// a JWT or an API key and an API secret.
type IpfsExportParams2 struct {
	// Will be added to the pinata_api_key header.
	APIKey string `json:"apiKey"`
}

func (o *IpfsExportParams2) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

// IpfsExportParams1 - Custom credentials for the Piñata service. Must have either
// a JWT or an API key and an API secret.
type IpfsExportParams1 struct {
}

type PinataType string

const (
	PinataTypeIpfsExportParams1 PinataType = "ipfs-export-params_1"
	PinataTypeIpfsExportParams2 PinataType = "ipfs-export-params_2"
)

type Pinata struct {
	IpfsExportParams1 *IpfsExportParams1
	IpfsExportParams2 *IpfsExportParams2

	Type PinataType
}

func CreatePinataIpfsExportParams1(ipfsExportParams1 IpfsExportParams1) Pinata {
	typ := PinataTypeIpfsExportParams1

	return Pinata{
		IpfsExportParams1: &ipfsExportParams1,
		Type:              typ,
	}
}

func CreatePinataIpfsExportParams2(ipfsExportParams2 IpfsExportParams2) Pinata {
	typ := PinataTypeIpfsExportParams2

	return Pinata{
		IpfsExportParams2: &ipfsExportParams2,
		Type:              typ,
	}
}

func (u *Pinata) UnmarshalJSON(data []byte) error {

	ipfsExportParams1 := IpfsExportParams1{}
	if err := utils.UnmarshalJSON(data, &ipfsExportParams1, "", true, true); err == nil {
		u.IpfsExportParams1 = &ipfsExportParams1
		u.Type = PinataTypeIpfsExportParams1
		return nil
	}

	ipfsExportParams2 := IpfsExportParams2{}
	if err := utils.UnmarshalJSON(data, &ipfsExportParams2, "", true, true); err == nil {
		u.IpfsExportParams2 = &ipfsExportParams2
		u.Type = PinataTypeIpfsExportParams2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Pinata) MarshalJSON() ([]byte, error) {
	if u.IpfsExportParams1 != nil {
		return utils.MarshalJSON(u.IpfsExportParams1, "", true)
	}

	if u.IpfsExportParams2 != nil {
		return utils.MarshalJSON(u.IpfsExportParams2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type IpfsExportParams struct {
	DollarRef interface{} `json:"$ref,omitempty"`
	// Custom credentials for the Piñata service. Must have either
	// a JWT or an API key and an API secret.
	//
	Pinata *Pinata `json:"pinata,omitempty"`
}

func (o *IpfsExportParams) GetDollarRef() interface{} {
	if o == nil {
		return nil
	}
	return o.DollarRef
}

func (o *IpfsExportParams) GetPinata() *Pinata {
	if o == nil {
		return nil
	}
	return o.Pinata
}
