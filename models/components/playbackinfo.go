// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Hrn string

const (
	HrnHlsTs Hrn = "HLS (TS)"
)

func (e Hrn) ToPointer() *Hrn {
	return &e
}
func (e *Hrn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HLS (TS)":
		*e = Hrn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hrn: %v", v)
	}
}

type PlaybackInfoMetaDvrPlaybackType string

const (
	PlaybackInfoMetaDvrPlaybackTypeHtml5ApplicationVndAppleMpegurl PlaybackInfoMetaDvrPlaybackType = "html5/application/vnd.apple.mpegurl"
)

func (e PlaybackInfoMetaDvrPlaybackType) ToPointer() *PlaybackInfoMetaDvrPlaybackType {
	return &e
}
func (e *PlaybackInfoMetaDvrPlaybackType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "html5/application/vnd.apple.mpegurl":
		*e = PlaybackInfoMetaDvrPlaybackType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackInfoMetaDvrPlaybackType: %v", v)
	}
}

type DvrPlayback struct {
	Error *string                          `json:"error,omitempty"`
	Hrn   *Hrn                             `json:"hrn,omitempty"`
	Type  *PlaybackInfoMetaDvrPlaybackType `json:"type,omitempty"`
	URL   *string                          `json:"url,omitempty"`
}

func (o *DvrPlayback) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *DvrPlayback) GetHrn() *Hrn {
	if o == nil {
		return nil
	}
	return o.Hrn
}

func (o *DvrPlayback) GetType() *PlaybackInfoMetaDvrPlaybackType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *DvrPlayback) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type Live int64

const (
	LiveZero Live = 0
	LiveOne  Live = 1
)

func (e Live) ToPointer() *Live {
	return &e
}
func (e *Live) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = Live(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Live: %v", v)
	}
}

// PlaybackInfoHrn - Human Readable Name
type PlaybackInfoHrn string

const (
	PlaybackInfoHrnHlsTs         PlaybackInfoHrn = "HLS (TS)"
	PlaybackInfoHrnMp4           PlaybackInfoHrn = "MP4"
	PlaybackInfoHrnWebRtcH264    PlaybackInfoHrn = "WebRTC (H264)"
	PlaybackInfoHrnFlvH264       PlaybackInfoHrn = "FLV (H264)"
	PlaybackInfoHrnThumbnailJpeg PlaybackInfoHrn = "Thumbnail (JPEG)"
	PlaybackInfoHrnThumbnails    PlaybackInfoHrn = "Thumbnails"
)

func (e PlaybackInfoHrn) ToPointer() *PlaybackInfoHrn {
	return &e
}
func (e *PlaybackInfoHrn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HLS (TS)":
		fallthrough
	case "MP4":
		fallthrough
	case "WebRTC (H264)":
		fallthrough
	case "FLV (H264)":
		fallthrough
	case "Thumbnail (JPEG)":
		fallthrough
	case "Thumbnails":
		*e = PlaybackInfoHrn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackInfoHrn: %v", v)
	}
}

type PlaybackInfoMetaType string

const (
	PlaybackInfoMetaTypeHtml5ApplicationVndAppleMpegurl PlaybackInfoMetaType = "html5/application/vnd.apple.mpegurl"
	PlaybackInfoMetaTypeHtml5VideoMp4                   PlaybackInfoMetaType = "html5/video/mp4"
	PlaybackInfoMetaTypeHtml5VideoH264                  PlaybackInfoMetaType = "html5/video/h264"
	PlaybackInfoMetaTypeVideoXFlv                       PlaybackInfoMetaType = "video/x-flv"
	PlaybackInfoMetaTypeImageJpeg                       PlaybackInfoMetaType = "image/jpeg"
	PlaybackInfoMetaTypeTextVtt                         PlaybackInfoMetaType = "text/vtt"
)

func (e PlaybackInfoMetaType) ToPointer() *PlaybackInfoMetaType {
	return &e
}
func (e *PlaybackInfoMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "html5/application/vnd.apple.mpegurl":
		fallthrough
	case "html5/video/mp4":
		fallthrough
	case "html5/video/h264":
		fallthrough
	case "video/x-flv":
		fallthrough
	case "image/jpeg":
		fallthrough
	case "text/vtt":
		*e = PlaybackInfoMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackInfoMetaType: %v", v)
	}
}

type PlaybackInfoSource struct {
	Bitrate *float64 `json:"bitrate,omitempty"`
	Height  *float64 `json:"height,omitempty"`
	// Human Readable Name
	Hrn   PlaybackInfoHrn      `json:"hrn"`
	Size  *float64             `json:"size,omitempty"`
	Type  PlaybackInfoMetaType `json:"type"`
	URL   string               `json:"url"`
	Width *float64             `json:"width,omitempty"`
}

func (o *PlaybackInfoSource) GetBitrate() *float64 {
	if o == nil {
		return nil
	}
	return o.Bitrate
}

func (o *PlaybackInfoSource) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *PlaybackInfoSource) GetHrn() PlaybackInfoHrn {
	if o == nil {
		return PlaybackInfoHrn("")
	}
	return o.Hrn
}

func (o *PlaybackInfoSource) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *PlaybackInfoSource) GetType() PlaybackInfoMetaType {
	if o == nil {
		return PlaybackInfoMetaType("")
	}
	return o.Type
}

func (o *PlaybackInfoSource) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *PlaybackInfoSource) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

type Meta struct {
	Attestation *Attestation  `json:"attestation,omitempty"`
	DvrPlayback []DvrPlayback `json:"dvrPlayback,omitempty"`
	Live        *Live         `json:"live,omitempty"`
	// Whether the playback policy for an asset or stream is public or signed
	PlaybackPolicy *PlaybackPolicy      `json:"playbackPolicy,omitempty"`
	Source         []PlaybackInfoSource `json:"source"`
}

func (o *Meta) GetAttestation() *Attestation {
	if o == nil {
		return nil
	}
	return o.Attestation
}

func (o *Meta) GetDvrPlayback() []DvrPlayback {
	if o == nil {
		return nil
	}
	return o.DvrPlayback
}

func (o *Meta) GetLive() *Live {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *Meta) GetPlaybackPolicy() *PlaybackPolicy {
	if o == nil {
		return nil
	}
	return o.PlaybackPolicy
}

func (o *Meta) GetSource() []PlaybackInfoSource {
	if o == nil {
		return []PlaybackInfoSource{}
	}
	return o.Source
}

type PlaybackInfoType string

const (
	PlaybackInfoTypeLive      PlaybackInfoType = "live"
	PlaybackInfoTypeVod       PlaybackInfoType = "vod"
	PlaybackInfoTypeRecording PlaybackInfoType = "recording"
)

func (e PlaybackInfoType) ToPointer() *PlaybackInfoType {
	return &e
}
func (e *PlaybackInfoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "vod":
		fallthrough
	case "recording":
		*e = PlaybackInfoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackInfoType: %v", v)
	}
}

type PlaybackInfo struct {
	Meta Meta             `json:"meta"`
	Type PlaybackInfoType `json:"type"`
}

func (o *PlaybackInfo) GetMeta() Meta {
	if o == nil {
		return Meta{}
	}
	return o.Meta
}

func (o *PlaybackInfo) GetType() PlaybackInfoType {
	if o == nil {
		return PlaybackInfoType("")
	}
	return o.Type
}
