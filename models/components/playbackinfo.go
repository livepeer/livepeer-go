// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PlaybackInfoType string

const (
	PlaybackInfoTypeLive      PlaybackInfoType = "live"
	PlaybackInfoTypeVod       PlaybackInfoType = "vod"
	PlaybackInfoTypeRecording PlaybackInfoType = "recording"
)

func (e PlaybackInfoType) ToPointer() *PlaybackInfoType {
	return &e
}

func (e *PlaybackInfoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "vod":
		fallthrough
	case "recording":
		*e = PlaybackInfoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackInfoType: %v", v)
	}
}

// Hrn - Human Readable Name
type Hrn string

const (
	HrnHlsTs         Hrn = "HLS (TS)"
	HrnMp4           Hrn = "MP4"
	HrnWebRtcH264    Hrn = "WebRTC (H264)"
	HrnThumbnailJpeg Hrn = "Thumbnail (JPEG)"
	HrnThumbnails    Hrn = "Thumbnails"
)

func (e Hrn) ToPointer() *Hrn {
	return &e
}

func (e *Hrn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HLS (TS)":
		fallthrough
	case "MP4":
		fallthrough
	case "WebRTC (H264)":
		fallthrough
	case "Thumbnail (JPEG)":
		fallthrough
	case "Thumbnails":
		*e = Hrn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hrn: %v", v)
	}
}

type PlaybackInfoSchemasType string

const (
	PlaybackInfoSchemasTypeHtml5ApplicationVndAppleMpegurl PlaybackInfoSchemasType = "html5/application/vnd.apple.mpegurl"
	PlaybackInfoSchemasTypeHtml5VideoMp4                   PlaybackInfoSchemasType = "html5/video/mp4"
	PlaybackInfoSchemasTypeHtml5VideoH264                  PlaybackInfoSchemasType = "html5/video/h264"
	PlaybackInfoSchemasTypeImageJpeg                       PlaybackInfoSchemasType = "image/jpeg"
	PlaybackInfoSchemasTypeTextVtt                         PlaybackInfoSchemasType = "text/vtt"
)

func (e PlaybackInfoSchemasType) ToPointer() *PlaybackInfoSchemasType {
	return &e
}

func (e *PlaybackInfoSchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "html5/application/vnd.apple.mpegurl":
		fallthrough
	case "html5/video/mp4":
		fallthrough
	case "html5/video/h264":
		fallthrough
	case "image/jpeg":
		fallthrough
	case "text/vtt":
		*e = PlaybackInfoSchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackInfoSchemasType: %v", v)
	}
}

type PlaybackInfoSource struct {
	// Human Readable Name
	Hrn     Hrn                     `json:"hrn"`
	Type    PlaybackInfoSchemasType `json:"type"`
	URL     string                  `json:"url"`
	Size    *float64                `json:"size,omitempty"`
	Width   *float64                `json:"width,omitempty"`
	Height  *float64                `json:"height,omitempty"`
	Bitrate *float64                `json:"bitrate,omitempty"`
}

func (o *PlaybackInfoSource) GetHrn() Hrn {
	if o == nil {
		return Hrn("")
	}
	return o.Hrn
}

func (o *PlaybackInfoSource) GetType() PlaybackInfoSchemasType {
	if o == nil {
		return PlaybackInfoSchemasType("")
	}
	return o.Type
}

func (o *PlaybackInfoSource) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *PlaybackInfoSource) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *PlaybackInfoSource) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *PlaybackInfoSource) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *PlaybackInfoSource) GetBitrate() *float64 {
	if o == nil {
		return nil
	}
	return o.Bitrate
}

type PlaybackInfoHrn string

const (
	PlaybackInfoHrnHlsTs PlaybackInfoHrn = "HLS (TS)"
)

func (e PlaybackInfoHrn) ToPointer() *PlaybackInfoHrn {
	return &e
}

func (e *PlaybackInfoHrn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HLS (TS)":
		*e = PlaybackInfoHrn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackInfoHrn: %v", v)
	}
}

type PlaybackInfoSchemasMetaType string

const (
	PlaybackInfoSchemasMetaTypeHtml5ApplicationVndAppleMpegurl PlaybackInfoSchemasMetaType = "html5/application/vnd.apple.mpegurl"
)

func (e PlaybackInfoSchemasMetaType) ToPointer() *PlaybackInfoSchemasMetaType {
	return &e
}

func (e *PlaybackInfoSchemasMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "html5/application/vnd.apple.mpegurl":
		*e = PlaybackInfoSchemasMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackInfoSchemasMetaType: %v", v)
	}
}

type DvrPlayback struct {
	Hrn   *PlaybackInfoHrn             `json:"hrn,omitempty"`
	Type  *PlaybackInfoSchemasMetaType `json:"type,omitempty"`
	URL   *string                      `json:"url,omitempty"`
	Error *string                      `json:"error,omitempty"`
}

func (o *DvrPlayback) GetHrn() *PlaybackInfoHrn {
	if o == nil {
		return nil
	}
	return o.Hrn
}

func (o *DvrPlayback) GetType() *PlaybackInfoSchemasMetaType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *DvrPlayback) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *DvrPlayback) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

type Meta struct {
	Live *float64 `json:"live,omitempty"`
	// Whether the playback policy for a asset or stream is public or signed
	PlaybackPolicy *PlaybackPolicy      `json:"playbackPolicy,omitempty"`
	Source         []PlaybackInfoSource `json:"source"`
	DvrPlayback    []DvrPlayback        `json:"dvrPlayback,omitempty"`
	Attestation    *Attestation         `json:"attestation,omitempty"`
}

func (o *Meta) GetLive() *float64 {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *Meta) GetPlaybackPolicy() *PlaybackPolicy {
	if o == nil {
		return nil
	}
	return o.PlaybackPolicy
}

func (o *Meta) GetSource() []PlaybackInfoSource {
	if o == nil {
		return []PlaybackInfoSource{}
	}
	return o.Source
}

func (o *Meta) GetDvrPlayback() []DvrPlayback {
	if o == nil {
		return nil
	}
	return o.DvrPlayback
}

func (o *Meta) GetAttestation() *Attestation {
	if o == nil {
		return nil
	}
	return o.Attestation
}

type PlaybackInfo struct {
	Type PlaybackInfoType `json:"type"`
	Meta Meta             `json:"meta"`
}

func (o *PlaybackInfo) GetType() PlaybackInfoType {
	if o == nil {
		return PlaybackInfoType("")
	}
	return o.Type
}

func (o *PlaybackInfo) GetMeta() Meta {
	if o == nil {
		return Meta{}
	}
	return o.Meta
}
