// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"github.com/livepeer/livepeer-go/internal/utils"
)

type Ipfs1 struct {
	Spec *Spec `json:"spec,omitempty"`
}

func (o *Ipfs1) GetSpec() *Spec {
	if o == nil {
		return nil
	}
	return o.Spec
}

type IpfsType string

const (
	IpfsTypeIpfs1   IpfsType = "ipfs_1"
	IpfsTypeBoolean IpfsType = "boolean"
)

// Ipfs - Set to true to make default export to IPFS. To customize the
// pinned files, specify an object with a spec field. False or null
// means to unpin from IPFS, but it's unsupported right now.
type Ipfs struct {
	Ipfs1   *Ipfs1
	Boolean *bool

	Type IpfsType
}

func CreateIpfsIpfs1(ipfs1 Ipfs1) Ipfs {
	typ := IpfsTypeIpfs1

	return Ipfs{
		Ipfs1: &ipfs1,
		Type:  typ,
	}
}

func CreateIpfsBoolean(boolean bool) Ipfs {
	typ := IpfsTypeBoolean

	return Ipfs{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *Ipfs) UnmarshalJSON(data []byte) error {

	ipfs1 := Ipfs1{}
	if err := utils.UnmarshalJSON(data, &ipfs1, "", true, true); err == nil {
		u.Ipfs1 = &ipfs1
		u.Type = IpfsTypeIpfs1
		return nil
	}

	boolean := false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = IpfsTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Ipfs) MarshalJSON() ([]byte, error) {
	if u.Ipfs1 != nil {
		return utils.MarshalJSON(u.Ipfs1, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Storage struct {
	// Set to true to make default export to IPFS. To customize the
	// pinned files, specify an object with a spec field. False or null
	// means to unpin from IPFS, but it's unsupported right now.
	//
	Ipfs *Ipfs `json:"ipfs,omitempty"`
}

func (o *Storage) GetIpfs() *Ipfs {
	if o == nil {
		return nil
	}
	return o.Ipfs
}
