// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type TranscodeProfileProfile string

const (
	TranscodeProfileProfileH264Baseline        TranscodeProfileProfile = "H264Baseline"
	TranscodeProfileProfileH264Main            TranscodeProfileProfile = "H264Main"
	TranscodeProfileProfileH264High            TranscodeProfileProfile = "H264High"
	TranscodeProfileProfileH264ConstrainedHigh TranscodeProfileProfile = "H264ConstrainedHigh"
)

func (e TranscodeProfileProfile) ToPointer() *TranscodeProfileProfile {
	return &e
}
func (e *TranscodeProfileProfile) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "H264Baseline":
		fallthrough
	case "H264Main":
		fallthrough
	case "H264High":
		fallthrough
	case "H264ConstrainedHigh":
		*e = TranscodeProfileProfile(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TranscodeProfileProfile: %v", v)
	}
}

type TranscodeProfileEncoder string

const (
	TranscodeProfileEncoderH264 TranscodeProfileEncoder = "H.264"
	TranscodeProfileEncoderHevc TranscodeProfileEncoder = "HEVC"
	TranscodeProfileEncoderVp8  TranscodeProfileEncoder = "VP8"
	TranscodeProfileEncoderVp9  TranscodeProfileEncoder = "VP9"
)

func (e TranscodeProfileEncoder) ToPointer() *TranscodeProfileEncoder {
	return &e
}
func (e *TranscodeProfileEncoder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "H.264":
		fallthrough
	case "HEVC":
		fallthrough
	case "VP8":
		fallthrough
	case "VP9":
		*e = TranscodeProfileEncoder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TranscodeProfileEncoder: %v", v)
	}
}

// TranscodeProfile - Transcode API profile
type TranscodeProfile struct {
	Width   *int64  `json:"width,omitempty"`
	Name    *string `json:"name,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	Bitrate int64   `json:"bitrate"`
	// Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
	//
	Quality *int64                   `json:"quality,omitempty"`
	Fps     *int64                   `json:"fps,omitempty"`
	FpsDen  *int64                   `json:"fpsDen,omitempty"`
	Gop     *string                  `json:"gop,omitempty"`
	Profile *TranscodeProfileProfile `json:"profile,omitempty"`
	Encoder *TranscodeProfileEncoder `json:"encoder,omitempty"`
}

func (o *TranscodeProfile) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *TranscodeProfile) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TranscodeProfile) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *TranscodeProfile) GetBitrate() int64 {
	if o == nil {
		return 0
	}
	return o.Bitrate
}

func (o *TranscodeProfile) GetQuality() *int64 {
	if o == nil {
		return nil
	}
	return o.Quality
}

func (o *TranscodeProfile) GetFps() *int64 {
	if o == nil {
		return nil
	}
	return o.Fps
}

func (o *TranscodeProfile) GetFpsDen() *int64 {
	if o == nil {
		return nil
	}
	return o.FpsDen
}

func (o *TranscodeProfile) GetGop() *string {
	if o == nil {
		return nil
	}
	return o.Gop
}

func (o *TranscodeProfile) GetProfile() *TranscodeProfileProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *TranscodeProfile) GetEncoder() *TranscodeProfileEncoder {
	if o == nil {
		return nil
	}
	return o.Encoder
}
