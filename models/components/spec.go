// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/livepeer/livepeer-go/internal/utils"
)

// NftMetadataTemplate - Name of the NFT metadata template to export. 'player'
// will embed the Livepeer Player on the NFT while 'file'
// will reference only the immutable MP4 files.
type NftMetadataTemplate string

const (
	NftMetadataTemplateFile   NftMetadataTemplate = "file"
	NftMetadataTemplatePlayer NftMetadataTemplate = "player"
)

func (e NftMetadataTemplate) ToPointer() *NftMetadataTemplate {
	return &e
}
func (e *NftMetadataTemplate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "file":
		fallthrough
	case "player":
		*e = NftMetadataTemplate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NftMetadataTemplate: %v", v)
	}
}

// NftMetadata - Additional data to add to the NFT metadata exported to
// IPFS. Will be deep merged with the default metadata
// exported.
type NftMetadata struct {
}

type Spec struct {
	// Name of the NFT metadata template to export. 'player'
	// will embed the Livepeer Player on the NFT while 'file'
	// will reference only the immutable MP4 files.
	//
	NftMetadataTemplate *NftMetadataTemplate `default:"file" json:"nftMetadataTemplate"`
	// Additional data to add to the NFT metadata exported to
	// IPFS. Will be deep merged with the default metadata
	// exported.
	//
	NftMetadata *NftMetadata `json:"nftMetadata,omitempty"`
}

func (s Spec) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Spec) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Spec) GetNftMetadataTemplate() *NftMetadataTemplate {
	if o == nil {
		return nil
	}
	return o.NftMetadataTemplate
}

func (o *Spec) GetNftMetadata() *NftMetadata {
	if o == nil {
		return nil
	}
	return o.NftMetadata
}
