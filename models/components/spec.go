// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"livepeer/internal/utils"
)

// SpecNftMetadataTemplate - Name of the NFT metadata template to export. 'player'
// will embed the Livepeer Player on the NFT while 'file'
// will reference only the immutable MP4 files.
type SpecNftMetadataTemplate string

const (
	SpecNftMetadataTemplateFile   SpecNftMetadataTemplate = "file"
	SpecNftMetadataTemplatePlayer SpecNftMetadataTemplate = "player"
)

func (e SpecNftMetadataTemplate) ToPointer() *SpecNftMetadataTemplate {
	return &e
}

func (e *SpecNftMetadataTemplate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "file":
		fallthrough
	case "player":
		*e = SpecNftMetadataTemplate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SpecNftMetadataTemplate: %v", v)
	}
}

// SpecNftMetadata - Additional data to add to the NFT metadata exported to
// IPFS. Will be deep merged with the default metadata
// exported.
type SpecNftMetadata struct {
}

type Spec struct {
	// Name of the NFT metadata template to export. 'player'
	// will embed the Livepeer Player on the NFT while 'file'
	// will reference only the immutable MP4 files.
	//
	NftMetadataTemplate *SpecNftMetadataTemplate `default:"file" json:"nftMetadataTemplate"`
	// Additional data to add to the NFT metadata exported to
	// IPFS. Will be deep merged with the default metadata
	// exported.
	//
	NftMetadata *SpecNftMetadata `json:"nftMetadata,omitempty"`
}

func (s Spec) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Spec) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Spec) GetNftMetadataTemplate() *SpecNftMetadataTemplate {
	if o == nil {
		return nil
	}
	return o.NftMetadataTemplate
}

func (o *Spec) GetNftMetadata() *SpecNftMetadata {
	if o == nil {
		return nil
	}
	return o.NftMetadata
}
