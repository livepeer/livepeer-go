// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/livepeer/livepeer-go/internal/utils"
)

// One - 0: not mobile, 1: mobile screen share, 2: mobile camera.
type One int64

const (
	OneZero One = 0
	OneOne  One = 1
	OneTwo  One = 2
)

func (e One) ToPointer() *One {
	return &e
}
func (e *One) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		*e = One(v)
		return nil
	default:
		return fmt.Errorf("invalid value for One: %v", v)
	}
}

type IsMobileType string

const (
	IsMobileTypeOne     IsMobileType = "1"
	IsMobileTypeBoolean IsMobileType = "boolean"
)

// IsMobile - Indicates whether the stream will be pulled from a mobile source.
type IsMobile struct {
	One     *One
	Boolean *bool

	Type IsMobileType
}

func CreateIsMobileOne(one One) IsMobile {
	typ := IsMobileTypeOne

	return IsMobile{
		One:  &one,
		Type: typ,
	}
}

func CreateIsMobileBoolean(boolean bool) IsMobile {
	typ := IsMobileTypeBoolean

	return IsMobile{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *IsMobile) UnmarshalJSON(data []byte) error {

	var one One = One(0)
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = IsMobileTypeOne
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = IsMobileTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for IsMobile", string(data))
}

func (u IsMobile) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type IsMobile: all fields are null")
}

// Location - Approximate location of the pull source. The location is used to
// determine the closest Livepeer region to pull the stream from.
type Location struct {
	// Latitude of the pull source in degrees. North is positive,
	// south is negative.
	Lat float64 `json:"lat"`
	// Longitude of the pull source in degrees. East is positive,
	// west is negative.
	Lon float64 `json:"lon"`
}

func (o *Location) GetLat() float64 {
	if o == nil {
		return 0.0
	}
	return o.Lat
}

func (o *Location) GetLon() float64 {
	if o == nil {
		return 0.0
	}
	return o.Lon
}

// Pull - Configuration for a stream that should be actively pulled from an
// external source, rather than pushed to Livepeer. If specified, the
// stream will not have a streamKey.
type Pull struct {
	// URL from which to pull from.
	Source string `json:"source"`
	// Headers to be sent with the request to the pull source.
	Headers map[string]string `json:"headers,omitempty"`
	// Indicates whether the stream will be pulled from a mobile source.
	IsMobile *IsMobile `json:"isMobile,omitempty"`
	// Approximate location of the pull source. The location is used to
	// determine the closest Livepeer region to pull the stream from.
	Location *Location `json:"location,omitempty"`
}

func (o *Pull) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

func (o *Pull) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Pull) GetIsMobile() *IsMobile {
	if o == nil {
		return nil
	}
	return o.IsMobile
}

func (o *Pull) GetLocation() *Location {
	if o == nil {
		return nil
	}
	return o.Location
}
