// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/livepeer/livepeer-go/internal/utils"
)

// IsMobile - If true, the stream will be pulled from a mobile source.
type IsMobile int64

const (
	IsMobileZero IsMobile = 0
	IsMobileOne  IsMobile = 1
	IsMobileTwo  IsMobile = 2
)

func (e IsMobile) ToPointer() *IsMobile {
	return &e
}

func (e *IsMobile) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		*e = IsMobile(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IsMobile: %v", v)
	}
}

// Location - Approximate location of the pull source. The location is used to
// determine the closest Livepeer region to pull the stream from.
type Location struct {
	// Latitude of the pull source in degrees. North is positive,
	// south is negative.
	Lat float64 `json:"lat"`
	// Longitude of the pull source in degrees. East is positive,
	// west is negative.
	Lon float64 `json:"lon"`
}

func (o *Location) GetLat() float64 {
	if o == nil {
		return 0.0
	}
	return o.Lat
}

func (o *Location) GetLon() float64 {
	if o == nil {
		return 0.0
	}
	return o.Lon
}

// Pull - Configuration for a stream that should be actively pulled from an
// external source, rather than pushed to Livepeer. If specified, the
// stream will not have a streamKey.
type Pull struct {
	// URL from which to pull from.
	Source string `json:"source"`
	// Headers to be sent with the request to the pull source.
	Headers map[string]string `json:"headers,omitempty"`
	// If true, the stream will be pulled from a mobile source.
	IsMobile *IsMobile `default:"0" json:"isMobile"`
	// Approximate location of the pull source. The location is used to
	// determine the closest Livepeer region to pull the stream from.
	Location *Location `json:"location,omitempty"`
}

func (p Pull) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Pull) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Pull) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

func (o *Pull) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Pull) GetIsMobile() *IsMobile {
	if o == nil {
		return nil
	}
	return o.IsMobile
}

func (o *Pull) GetLocation() *Location {
	if o == nil {
		return nil
	}
	return o.Location
}
