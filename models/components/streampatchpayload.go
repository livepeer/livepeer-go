// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

type StreamPatchPayload struct {
	CreatorID *InputCreatorID `json:"creatorId,omitempty"`
	// Should this stream be recorded? Uses default settings. For more
	// customization, create and configure an object store.
	//
	Record *bool `json:"record,omitempty"`
	// If currently suspended
	Suspended   *bool        `json:"suspended,omitempty"`
	Multistream *Multistream `json:"multistream,omitempty"`
	// Whether the playback policy for an asset or stream is public or signed
	PlaybackPolicy *PlaybackPolicy `json:"playbackPolicy,omitempty"`
	Profiles       []FfmpegProfile `json:"profiles,omitempty"`
	RecordingSpec  *RecordingSpec  `json:"recordingSpec,omitempty"`
	// User input tags associated with the stream
	UserTags map[string]UserTags `json:"userTags,omitempty"`
}

func (o *StreamPatchPayload) GetCreatorID() *InputCreatorID {
	if o == nil {
		return nil
	}
	return o.CreatorID
}

func (o *StreamPatchPayload) GetRecord() *bool {
	if o == nil {
		return nil
	}
	return o.Record
}

func (o *StreamPatchPayload) GetSuspended() *bool {
	if o == nil {
		return nil
	}
	return o.Suspended
}

func (o *StreamPatchPayload) GetMultistream() *Multistream {
	if o == nil {
		return nil
	}
	return o.Multistream
}

func (o *StreamPatchPayload) GetPlaybackPolicy() *PlaybackPolicy {
	if o == nil {
		return nil
	}
	return o.PlaybackPolicy
}

func (o *StreamPatchPayload) GetProfiles() []FfmpegProfile {
	if o == nil {
		return nil
	}
	return o.Profiles
}

func (o *StreamPatchPayload) GetRecordingSpec() *RecordingSpec {
	if o == nil {
		return nil
	}
	return o.RecordingSpec
}

func (o *StreamPatchPayload) GetUserTags() map[string]UserTags {
	if o == nil {
		return nil
	}
	return o.UserTags
}
