// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type FfmpegProfileEncoder string

const (
	FfmpegProfileEncoderH264 FfmpegProfileEncoder = "H.264"
)

func (e FfmpegProfileEncoder) ToPointer() *FfmpegProfileEncoder {
	return &e
}
func (e *FfmpegProfileEncoder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "H.264":
		*e = FfmpegProfileEncoder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FfmpegProfileEncoder: %v", v)
	}
}

type FfmpegProfileProfile string

const (
	FfmpegProfileProfileH264Baseline        FfmpegProfileProfile = "H264Baseline"
	FfmpegProfileProfileH264Main            FfmpegProfileProfile = "H264Main"
	FfmpegProfileProfileH264High            FfmpegProfileProfile = "H264High"
	FfmpegProfileProfileH264ConstrainedHigh FfmpegProfileProfile = "H264ConstrainedHigh"
)

func (e FfmpegProfileProfile) ToPointer() *FfmpegProfileProfile {
	return &e
}
func (e *FfmpegProfileProfile) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "H264Baseline":
		fallthrough
	case "H264Main":
		fallthrough
	case "H264High":
		fallthrough
	case "H264ConstrainedHigh":
		*e = FfmpegProfileProfile(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FfmpegProfileProfile: %v", v)
	}
}

// FfmpegProfile - Transcode profile
type FfmpegProfile struct {
	Bitrate int64                 `json:"bitrate"`
	Encoder *FfmpegProfileEncoder `json:"encoder,omitempty"`
	Fps     int64                 `json:"fps"`
	FpsDen  *int64                `json:"fpsDen,omitempty"`
	Gop     *string               `json:"gop,omitempty"`
	Height  int64                 `json:"height"`
	Name    string                `json:"name"`
	Profile *FfmpegProfileProfile `json:"profile,omitempty"`
	// Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
	//
	Quality *int64 `json:"quality,omitempty"`
	Width   int64  `json:"width"`
}

func (o *FfmpegProfile) GetBitrate() int64 {
	if o == nil {
		return 0
	}
	return o.Bitrate
}

func (o *FfmpegProfile) GetEncoder() *FfmpegProfileEncoder {
	if o == nil {
		return nil
	}
	return o.Encoder
}

func (o *FfmpegProfile) GetFps() int64 {
	if o == nil {
		return 0
	}
	return o.Fps
}

func (o *FfmpegProfile) GetFpsDen() *int64 {
	if o == nil {
		return nil
	}
	return o.FpsDen
}

func (o *FfmpegProfile) GetGop() *string {
	if o == nil {
		return nil
	}
	return o.Gop
}

func (o *FfmpegProfile) GetHeight() int64 {
	if o == nil {
		return 0
	}
	return o.Height
}

func (o *FfmpegProfile) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *FfmpegProfile) GetProfile() *FfmpegProfileProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *FfmpegProfile) GetQuality() *int64 {
	if o == nil {
		return nil
	}
	return o.Quality
}

func (o *FfmpegProfile) GetWidth() int64 {
	if o == nil {
		return 0
	}
	return o.Width
}
