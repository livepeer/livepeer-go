// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Profile string

const (
	ProfileH264Baseline        Profile = "H264Baseline"
	ProfileH264Main            Profile = "H264Main"
	ProfileH264High            Profile = "H264High"
	ProfileH264ConstrainedHigh Profile = "H264ConstrainedHigh"
)

func (e Profile) ToPointer() *Profile {
	return &e
}

func (e *Profile) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "H264Baseline":
		fallthrough
	case "H264Main":
		fallthrough
	case "H264High":
		fallthrough
	case "H264ConstrainedHigh":
		*e = Profile(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Profile: %v", v)
	}
}

type Encoder string

const (
	EncoderH264 Encoder = "H.264"
	EncoderHevc Encoder = "HEVC"
	EncoderVp8  Encoder = "VP8"
	EncoderVp9  Encoder = "VP9"
)

func (e Encoder) ToPointer() *Encoder {
	return &e
}

func (e *Encoder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "H.264":
		fallthrough
	case "HEVC":
		fallthrough
	case "VP8":
		fallthrough
	case "VP9":
		*e = Encoder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Encoder: %v", v)
	}
}

// FfmpegProfile - LMPS ffmpeg profile
type FfmpegProfile struct {
	Width   int64  `json:"width"`
	Name    string `json:"name"`
	Height  int64  `json:"height"`
	Bitrate int64  `json:"bitrate"`
	Fps     int64  `json:"fps"`
	FpsDen  *int64 `json:"fpsDen,omitempty"`
	// Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
	//
	Quality *int64   `json:"quality,omitempty"`
	Gop     *string  `json:"gop,omitempty"`
	Profile *Profile `json:"profile,omitempty"`
	Encoder *Encoder `json:"encoder,omitempty"`
}

func (o *FfmpegProfile) GetWidth() int64 {
	if o == nil {
		return 0
	}
	return o.Width
}

func (o *FfmpegProfile) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *FfmpegProfile) GetHeight() int64 {
	if o == nil {
		return 0
	}
	return o.Height
}

func (o *FfmpegProfile) GetBitrate() int64 {
	if o == nil {
		return 0
	}
	return o.Bitrate
}

func (o *FfmpegProfile) GetFps() int64 {
	if o == nil {
		return 0
	}
	return o.Fps
}

func (o *FfmpegProfile) GetFpsDen() *int64 {
	if o == nil {
		return nil
	}
	return o.FpsDen
}

func (o *FfmpegProfile) GetQuality() *int64 {
	if o == nil {
		return nil
	}
	return o.Quality
}

func (o *FfmpegProfile) GetGop() *string {
	if o == nil {
		return nil
	}
	return o.Gop
}

func (o *FfmpegProfile) GetProfile() *Profile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *FfmpegProfile) GetEncoder() *Encoder {
	if o == nil {
		return nil
	}
	return o.Encoder
}
